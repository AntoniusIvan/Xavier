@page "/"
@inject NavigationManager Nav
@inject CatalogService CatalogService

<HeaderBar />
<PageTitle>Northern Mountains</PageTitle>
<SectionContent SectionName="page-header-title">Ready for a new adventure?</SectionContent>
<SectionContent SectionName="page-header-subtitle">Start the season with the latest in clothing and equipment.</SectionContent>
<h3>Catalog</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<div class="catalog">
    @* <CatalogSearch BrandId="@BrandId" ItemTypeId="@ItemTypeId" /> *@

    @if (catalogResult is null)
    {
        <p>Loading...</p>
    }
    @*    else
    {
    <div>
    <div class="catalog-items">
    @foreach (var item in catalogResult.Data)
    {
    <CatalogListItem Item="@item" />
    }
    </div>

    <div class="page-links">
    @foreach (var pageIndex in GetVisiblePageIndexes(catalogResult))
    {
    @* <NavLink ActiveClass="active-page" Match="@NavLinkMatch.All" href="@Nav.GetUriWithQueryParameter("page", pageIndex == 1 ? null : pageIndex)">@pageIndex</NavLink> *@
    @* } *@
    @* </div> *@
    @* </div> *@
    @* } *@
</div>


@* <div class="eshop-header-hero">
    @{
        var headerImage = IsCatalog ? "images/header-home.webp" : "images/header.webp";
    }
    <img src="@headerImage" />
</div> *@

<FooterBar />

@code {
    private bool IsCatalog { get; } = true;

    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
    }
    const int PageSize = 9;

    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    [SupplyParameterFromQuery(Name = "brand")]
    public int? BrandId { get; set; }

    [SupplyParameterFromQuery(Name = "type")]
    public int? ProductTypeId { get; set; }

    CatalogResult? catalogResult;

    static IEnumerable<int> GetVisiblePageIndexes(CatalogResult result)
        => Enumerable.Range(1, (int)Math.Ceiling(1.0 * result.Count / PageSize));

    protected override async Task OnParametersSetAsync()
    {
        catalogResult = await CatalogService.GetCatalogProducts(
            Page.GetValueOrDefault(1) - 1,
            PageSize,
            BrandId,
            ProductTypeId);

        catalogResult = await CatalogService.GetCatalogProducts(
    Page.GetValueOrDefault(1) - 1,
    PageSize,
    BrandId,
    ProductTypeId);
    }

}
